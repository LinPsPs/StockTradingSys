package dao;

import model.RevenueItem;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class SalesDao {

    private List<RevenueItem> getDummyRevenueItems()
    {
        List<RevenueItem> items = new ArrayList<RevenueItem>();

		/*Sample data begins*/
        for (int i = 0; i < 10; i++) {
            RevenueItem item = new RevenueItem();
            item.setDate(new Date());
            item.setNumShares(5);
            item.setAccountId("foo");
            item.setPricePerShare(50.0);
            item.setStockSymbol("AAPL");
            item.setAmount(150.0);
            items.add(item);
        }
        /*Sample data ends*/

        return items;
    }
    public List<RevenueItem> getSalesReport(String month, String year) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to get sales report for a particular month and year
		 */
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ArrayList<RevenueItem> report = new ArrayList<>();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://107.155.113.86:3306/STOCKSYSTEM?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC",
                    "cse305", "CSE305XYZ");
            connection.setAutoCommit(false); // only one transaction
            connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
            statement = connection.createStatement();
            preparedStatement= connection.prepareStatement(
                    "SELECT T.DateTime,T2.AccountId,T2.StockId,O.OrderType,T.PricePerShare,O.NumShares,(T.PricePerShare*O.NumShares) AS Amount\n" +
                    "FROM Transaction T,Trade T2,Orders O\n" +
                    "WHERE MONTH(T.DateTime)=? AND YEAR(T.DateTime) = ?\n" +
                    "AND T2.OrderId = O.Id AND T2.TransactionId = T.Id AND T.PricePerShare!=-1");
            preparedStatement.setInt(1,Integer.parseInt(month));
            preparedStatement.setInt(2,Integer.parseInt(year));
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                 RevenueItem revenueItem = new RevenueItem();
                 revenueItem.setAccountId(resultSet.getInt("AccountId")+"");
                 revenueItem.setAmount(resultSet.getDouble("Amount"));
                 Date orderDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                        .parse(resultSet.getString("DateTime"));
                 revenueItem.setDate(orderDate);
                 revenueItem.setNumShares(resultSet.getInt("NumShares"));
                 revenueItem.setPricePerShare(resultSet.getDouble("PricePerShare"));
                 revenueItem.setStockSymbol(resultSet.getString("StockId"));
                 report.add(revenueItem);
            }
            //clean
            connection.commit();
            resultSet.close();
            statement.close();
            preparedStatement.close();
            connection.close();
            return report;
        }catch(SQLException ex){
            ex.printStackTrace();
            try{
                if (connection!=null)
                    connection.rollback();
            }catch (Exception e){
                System.out.println(e.getMessage());
            }
        } catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try{
                if (statement!=null)
                    statement.close();
            }catch (SQLException se2){
                System.out.println(se2.getMessage());
            }
            try{
                if (preparedStatement!=null)
                    preparedStatement.close();
            }catch (SQLException s2){
                System.out.println(s2.getMessage());
            }
            try{
                if (connection!=null)
                    connection.close();
            }catch (SQLException se3){
                System.out.println(se3.getMessage());
            }
        }
        return report;
    }



    public List<RevenueItem> getSummaryListing(String searchKeyword) {

		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular stock,
		 * stock type or customer must be implemented
		 * Store the revenue generated by an item in the amount attribute
		 */
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ArrayList<RevenueItem> report = new ArrayList<>();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://107.155.113.86:3306/STOCKSYSTEM?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC",
                    "cse305", "CSE305XYZ");
            connection.setAutoCommit(false); // only one transaction
            connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
            statement = connection.createStatement();
            //check key works in stockSymbol
            preparedStatement = connection.prepareStatement(
                    "SELECT StockSymbol FROM Stock S WHERE  S.StockSymbol = ?");
            preparedStatement.setString(1,searchKeyword);
            ResultSet resultSet = preparedStatement.executeQuery();
            String tempSymbol = null;
            while (resultSet.next()){
                tempSymbol = resultSet.getString("StockSymbol");
            }
            if (tempSymbol!=null){
                preparedStatement= connection.prepareStatement(
                        "SELECT T.DateTime,T2.AccountId,T2.StockId,O.OrderType,T.PricePerShare,O.NumShares,(T.PricePerShare*O.NumShares) AS Amount\n" +
                                "FROM Transaction T,Trade T2,Orders O\n" +
                                "WHERE T2.StockId =? AND T2.OrderId = O.Id AND T2.TransactionId = T.Id AND T.PricePerShare!=-1;");
                preparedStatement.setString(1,searchKeyword);
                resultSet = preparedStatement.executeQuery();
                while (resultSet.next()){
                    RevenueItem revenueItem = new RevenueItem();
                    revenueItem.setAccountId(resultSet.getInt("AccountId")+"");
                    revenueItem.setAmount(resultSet.getDouble("Amount"));
                    Date orderDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                            .parse(resultSet.getString("DateTime"));
                    revenueItem.setDate(orderDate);
                    revenueItem.setNumShares(resultSet.getInt("NumShares"));
                    revenueItem.setPricePerShare(resultSet.getDouble("PricePerShare"));
                    revenueItem.setStockSymbol(resultSet.getString("StockId"));
                    report.add(revenueItem);
                }
                //clean
                connection.commit();
                resultSet.close();
                statement.close();
                preparedStatement.close();
                connection.close();
                return report;
            }
            //check type
            String tempType = null;
            preparedStatement = connection.prepareStatement(
                    "SELECT Type FROM Stock S WHERE  S.Type =?\n" +
                            "GROUP BY Type");
            preparedStatement.setString(1,searchKeyword);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                tempType = resultSet.getString("Type");
            }
            if (tempType!=null){
                preparedStatement= connection.prepareStatement(
                        "SELECT T.DateTime,T2.AccountId,T2.StockId,O.OrderType,T.PricePerShare,O.NumShares,(T.PricePerShare*O.NumShares) AS Amount\n" +
                                "FROM Transaction T,Trade T2,Orders O,Stock S\n" +
                                "WHERE T2.StockId = S.StockSymbol AND S.Type =?  AND T2.OrderId = O.Id AND T2.TransactionId = T.Id AND T.PricePerShare!=-1;");
                preparedStatement.setString(1,searchKeyword);
                resultSet = preparedStatement.executeQuery();
                while (resultSet.next()){
                    RevenueItem revenueItem = new RevenueItem();
                    revenueItem.setAccountId(resultSet.getInt("AccountId")+"");
                    revenueItem.setAmount(resultSet.getDouble("Amount"));
                    Date orderDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                            .parse(resultSet.getString("DateTime"));
                    revenueItem.setDate(orderDate);
                    revenueItem.setNumShares(resultSet.getInt("NumShares"));
                    revenueItem.setPricePerShare(resultSet.getDouble("PricePerShare"));
                    revenueItem.setStockSymbol(resultSet.getString("StockId"));
                    report.add(revenueItem);
                }
                //clean
                connection.commit();
                resultSet.close();
                statement.close();
                preparedStatement.close();
                connection.close();
                return report;
            }
            //check name
            String tempName = null;
            preparedStatement = connection.prepareStatement(
                    "SELECT CONCAT(P.FirstName,' ',P.LastName)AS Name FROM Person P\n" +
                    "WHERE P.FirstName = ? AND P.LastName = ?");
            preparedStatement.setString(1,searchKeyword.substring(0,searchKeyword.indexOf(" ")));
            preparedStatement.setString(2,searchKeyword.substring(searchKeyword.indexOf(" ")+1));
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()){
                tempName = resultSet.getString("Name");
            }
            if (tempName!=null){
                preparedStatement= connection.prepareStatement(
                        "SELECT T.DateTime,T2.AccountId,T2.StockId,O.OrderType,T.PricePerShare,O.NumShares,(T.PricePerShare*O.NumShares) AS Amount\n" +
                                "FROM Transaction T,Trade T2,Orders O, Person P, Client C, Account A\n" +
                                "WHERE P.FirstName = ? AND P.LastName = ? AND A.Id = T2.AccountId AND A.Client = C.Id\n" +
                                "  AND P.SSN = C.Id AND T2.OrderId = O.Id AND T2.TransactionId = T.Id AND T.PricePerShare!=-1;");
                preparedStatement.setString(1,searchKeyword.substring(0,searchKeyword.indexOf(" ")));
                preparedStatement.setString(2,searchKeyword.substring(searchKeyword.indexOf(" ")+1));
                resultSet = preparedStatement.executeQuery();
                while (resultSet.next()){
                    RevenueItem revenueItem = new RevenueItem();
                    revenueItem.setAccountId(resultSet.getInt("AccountId")+"");
                    revenueItem.setAmount(resultSet.getDouble("Amount"));
                    Date orderDate=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                            .parse(resultSet.getString("DateTime"));
                    revenueItem.setDate(orderDate);
                    revenueItem.setNumShares(resultSet.getInt("NumShares"));
                    revenueItem.setPricePerShare(resultSet.getDouble("PricePerShare"));
                    revenueItem.setStockSymbol(resultSet.getString("StockId"));
                    report.add(revenueItem);
                }
                //clean
                connection.commit();
                resultSet.close();
                statement.close();
                preparedStatement.close();
                connection.close();
                return report;
            }
            //clean
            connection.commit();
            resultSet.close();
            statement.close();
            preparedStatement.close();
            connection.close();
            return report;

        }catch(SQLException ex){
            ex.printStackTrace();
            try{
                if (connection!=null)
                    connection.rollback();
            }catch (Exception e){
                System.out.println(e.getMessage());
            }
        } catch (Exception e){
            System.out.println(e.getMessage());
        }finally {
            try{
                if (statement!=null)
                    statement.close();
            }catch (SQLException se2){
                System.out.println(se2.getMessage());
            }
            try{
                if (preparedStatement!=null)
                    preparedStatement.close();
            }catch (SQLException s2){
                System.out.println(s2.getMessage());
            }
            try{
                if (connection!=null)
                    connection.close();
            }catch (SQLException se3){
                System.out.println(se3.getMessage());
            }
        }
        return report;
    }
}
